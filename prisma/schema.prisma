datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
    //   previewFeatures = ["mongodb"]
}

model User {
    id             String      @id @default(cuid())
    email          String      @unique
    emailVerified  DateTime?
    hashedPassword String?
    name           String?
    image          String?
    createdAt      DateTime    @default(now())
    updateAt       DateTime    @updatedAt
    Account        Account[]
    Session        Session[]
    products       Favorites[]
    cart           Cart[]

    @@map("user")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccoungId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_take      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccoungId])
    @@index([userId])
    @@map("account")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("session")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtoken")
}

model Products {
    id            Int             @id @default(autoincrement())
    title         String
    description   String  @db.VarChar(300)
    size          String?
    material      String?
    brands        String
    codeProduct   String
    image_l       String
    image_xl      String
    // images        String
    gender        String
    price         Int
    count         Int
    subcategoryId Int
    subcategory   SubCategory?    @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
    images        ProductImages[]
    users         Favorites[]
    Cart          Cart[]

    @@index([subcategoryId])
    @@map("products")
}

model Category {
    id          Int           @id @default(autoincrement())
    title       String        @unique
    subcategory SubCategory[]

    @@map("category")
}

model SubCategory {
    id            Int        @id @default(autoincrement())
    title         String
    categoryTitle String
    category      Category?  @relation(fields: [categoryTitle], references: [title], onDelete: Cascade)
    products      Products[]

    @@index([categoryTitle])
    @@map("subcategory")
}

model Favorites {
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @map("user_id")
    products   Products @relation(fields: [productId], references: [id])
    productId  Int      @map("product_id")
    assignedAt DateTime @default(now())

    @@id([userId, productId])
    @@index([userId])
    @@index([productId])
    @@map("favorites")
}

model Cart {
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @map("user_id")
    products   Products @relation(fields: [productId], references: [id])
    productId  Int      @map("product_id")
    assignedAt DateTime @default(now())

    @@id([userId, productId])
    @@index([userId])
    @@index([productId])
    @@map("cart")
}

model ProductImages {
    id        Int       @id @default(autoincrement())
    image     String    @unique
    productId Int?
    product   Products? @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@index([productId])
    @@map("product_images")
}
