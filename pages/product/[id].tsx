import FormAuth from "@/components/auth/FormAuth"
import Header from "@/components/header/header"
import { useCallback, useState } from 'react'
import Head from "next/head"
import { useRouter } from "next/router"
import fetcher from "@/lib/fetcher"
import useSWR from 'swr'
import ProductSlider from "@/components/product/ProductSlider"
import ProductInfo from "@/components/product/ProductInfo"
import ProductMain from "@/components/product/ProductMain"
import Road from "@/components/Road"
import fetcherParams from "@/lib/fetcherParams"
import useCart from "@/hooks/useCart"
import useFavorites from "@/hooks/useFavorites"
import useCurrentUser from "@/hooks/useCurrentUser"
import useProduct from "@/hooks/useProduct"

interface Product {
    id: number,
    title: string,
    description: string,
    size: string,
    material: string,
    brands: string,
    codeProduct: string,
    image_l: string,
    image_xl: string,
    images: Array<Images>,
    gender: string,
    price: number,
    count: number,
    subcategoryId: number,
    subcategory?: {
        id: number,
        title: string,
        categoryTitle: string
    }
}

interface Images {
    id: number,
    image: string,
    productId: number
}

const Product = () => {
    const [visibleAuth, setVisibleAuth] = useState(false)
    const { data: user, error: userError } = useCurrentUser()
    
    const toogleVisibleAuth = useCallback(() => {
        setVisibleAuth(!visibleAuth)
    }, [])

    const router = useRouter()
    const id = router.query.id
    const { product} = useProduct(id?.toString())

    const { data: favorites, mutate: mutateFavorite, isLoading: isLoadingFavorites }:any = useFavorites(user)
    const { data: cart, mutate: mutateCart }:any = useCart(user)

    const favorite = product && Array.isArray(favorites) && favorites.some(elem => elem.productId === product?.id)
    const cartStatus = product && Array.isArray(cart) && cart.some(elem => elem.productId === product?.id)
    
    const handleAddToFavorite =  (method: string) => {
         mutateFavorite(
            fetcherParams({
                method: method,
                url: product && `${process.env.NEXT_PUBLIC_API_HOST}/favorite/` + product.id,
                headers: { "Content-type": "application/json" },
            })
        )
    }

    const handleAddToCart = async (method: string) => {
        await mutateCart(
            fetcherParams({
                method: method,
                url: product && `${process.env.NEXT_PUBLIC_API_HOST}/cart/` + product.id,
                headers: { "Content-type": "application/json" },
            })
        )
    }

    return (<>
        <Head>
            <title>Salvo Store</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="" />
        </Head>

        <FormAuth closeModal={setVisibleAuth} visible={visibleAuth} user={user} />
        <Header
            currentUser={user}
            toogleVisibleAuth={toogleVisibleAuth}
            isLoading={false}
            favorites={favorites}
            cart={cart}
        />
        <Road
            category={product?.subcategory?.categoryTitle}
            subcetagory={product?.subcategory?.title}
            title={product?.title}
        />
        {product &&
            <div className="grid grid-flow-row grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 max-w-screen-xl m-auto">
                <ProductSlider
                    productId={product.id}
                    title={product.title}
                    images={product.images}
                />
                <ProductInfo
                    data={product}
                    userId={user?.id}
                    favorite={favorite}
                    cartStatus={cartStatus}
                    setVisibleAuth={setVisibleAuth}
                    handleAddToFavorite={handleAddToFavorite}
                    handleAddToCart={handleAddToCart}
                />
            </div>
        }
        <div className="max-w-screen-xl m-auto mt-5">
            <ProductMain />
        </div>
    </>
    )

}

export default Product