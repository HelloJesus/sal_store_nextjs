import FormAuth from "@/components/auth/FormAuth"
import Header from "@/components/header/header"
import { useCallback, useEffect, useState } from 'react'
import Head from "next/head"
import { useRouter } from "next/router"
import useSWR from 'swr'
import Card from "@/components/cards/card"
import useFavorites from "@/hooks/useFavorites"
import useCurrentUser from "@/hooks/useCurrentUser"
import useCart from "@/hooks/useCart"
import fetcherParams from "@/lib/fetcherParams"
import FilterProducts from "@/components/products/FilterProducts"
import fetcher from "@/lib/fetcher"


export interface IProduct {
    id: number,
    title: string,
    description: String,
    size: string,
    material: string,
    brands: string,
    codeProduct: string,
    image_l: string,
    image_xl: string,
    images: Array<string>,
    gender: string,
    price: number,
    count: number,
    subcategoryId: number
}

const Cards = () => {
    const [visibleAuth, setVisibleAuth] = useState(false)
    const [pageIndex, setPageIndex] = useState(0);
    const { data: user, error: userError } = useCurrentUser()

    const toogleVisibleAuth = useCallback(() => {
        setVisibleAuth(!visibleAuth)
    }, [])
    
    const router = useRouter()
    const { asPath, pathname, query } = router
    const { title = '', price = '', brand = '' }: any = router.query

    const { data: products, isLoading, mutate } = useSWR<any>(!asPath.includes('[[...title]]') && `${process.env.NEXT_PUBLIC_API_HOST}${asPath}`, fetcher)

    const { data: favorites, mutate: mutateFavorites, isLoading: isLoadingFavorites }:any = useFavorites(user)
    const { data: cart } = useCart(user)

    const update = (method: string, productId: string) => fetcherParams({
        method: method,
        url: productId && `${process.env.NEXT_PUBLIC_API_HOST}/favorite/` + productId,
        headers: { "Content-type": "application/json" },
    })

    const updateFavorite = useCallback(async (method: string, productId: string) => {
        await mutateFavorites(update(method, productId),
            {
                populateCache: (update: any, res: any) => {
                    if (method === 'DELETE') {
                        const filteredTodos = res.filter((elem: any) => elem.productId !== productId)
                        return [...filteredTodos]
                    }
                    if (method === 'POST') {
                        return [...res, update]
                    }
                },
                revalidate: true
            })
    }, [])

    return (<>
        <Head>
            <title>Salvo Store</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="" />
        </Head>

        <FormAuth closeModal={setVisibleAuth} visible={visibleAuth} user={user} />
        <Header
            currentUser={user}
            favorites={favorites}
            toogleVisibleAuth={toogleVisibleAuth}
            cart={cart}
            isLoading={false}
        />
        <div className="h-full pb-4">
            <FilterProducts category={title[0]} setPageIndex={setPageIndex}/>

            <div className=" mt-5 grid grid-cols-1 sx:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-5 lg:gap-10">
                {Array.isArray(products) && products.map((product: IProduct) => {
                    return (
                        <Card
                            productId={product.id}
                            title={product.title}
                            price={product.price}
                            image_l={product.image_l}
                            userId={user?.id}
                            favorites={favorites}
                            updateFavorite={updateFavorite}
                            isLoading={isLoading}
                            setVisibleAuth={setVisibleAuth}
                            key={product.id} />
                    )
                })}
            </div>
            <div className="w-full flex items-cente mt-5">
                <div className="m-auto flex gap-3.5">
                    {pageIndex > 0 &&
                        <button className="w-28 py-2 px-3 bg-sky-500 text-white rounded-lg active:bg-sky-700"
                            onClick={() => {
                                setPageIndex(pageIndex - 1)
                                if (router.query.page) {
                                    router.push({
                                        pathname,
                                        query: {
                                            ...query,
                                            page: pageIndex - 1,
                                        }
                                    })
                                } else {
                                    router.push({
                                        pathname,
                                        query: {
                                            page: pageIndex - 1,
                                            ...query
                                        }
                                    })
                                }
                            }}>Previous  </button>
                    }
                    {((products && products.length > 1 && products.length === 8 ) || (!products)) &&
                        <button className="w-28 py-2 px-3 bg-sky-500 text-white rounded-lg active:bg-sky-700"
                            onClick={() => {
                                setPageIndex(pageIndex + 1)
                                if (router.query.page) {
                                    router.push({
                                        pathname,
                                        query: {
                                            ...query,
                                            page: pageIndex + 1,
                                        }
                                    })
                                } else {
                                    router.push({
                                        pathname,
                                        query: {
                                            page: pageIndex + 1,
                                            ...query
                                        }
                                    })
                                }
                            }}>  Next</button>
                    }
                </div>
            </div>
        </div>
    </>
    )

}


export default Cards